
[gcode_macro NOZZLE_SCRUB]
description: repeatedly scrub the nozzle against a brush
gcode:
    # these defaults are probably "safe" to try without customizing
    {% set BRUSH_POSITION = params.BRUSH_POSITION | default("100.0,100.0") %}
    {% set BRUSH_POSITION_X = BRUSH_POSITION.split(",")[0] | float %}
    {% set BRUSH_POSITION_Y = BRUSH_POSITION.split(",")[1] | float %}
    {% set BRUSH_SIZE = params.BRUSH_SIZE | default("50.0,8.0") %}
    {% set BRUSH_SIZE_X = BRUSH_SIZE.split(",")[0] | float %}
    {% set BRUSH_SIZE_Y = BRUSH_SIZE.split(",")[1] | float %}
    {% set TRAVEL_SPEED = (params.TRAVEL_SPEED | default((printer.configfile.config.bed_mesh.speed | float) * 60.0)) | float %}
    {% set TRAVEL_HEIGHT = (params.TRAVEL_HEIGHT | default((printer.configfile.config.bed_mesh.horizontal_move_z | float))) | float %}
    {% set LIFT_SPEED = (params.LIFT_SPEED | default((printer.configfile.config.probe.speed | float) * 60.0) | float) %}
    {% set WIPE_SPEED = (params.WIPE_SPEED | default(TRAVEL_SPEED)) | float %}
    # This defaults the wipe height to something that should be safe
    {% set WIPE_HEIGHT = (params.WIPE_HEIGHT | default(TRAVEL_HEIGHT)) | float %}
    # default step size is the nozzle diameter
    {% set STEP_SIZE = (params.STEP_SIZE | default((printer.configfile.config.extruder.nozzle_diameter | float)) | float) %}
    # default step size is the nozzle diameter
    {% set Z_STEP_SIZE = (params.STEP_SIZE | default((printer.configfile.config.extruder.nozzle_diameter | float)) | float )%}
    {% set NOZZLE_DEPTH = (params.NOZZLE_DEPTH | default(0.0)) | float %}
    # 1 pass is 2 strokes across the brush, out and back
    {% set PASSES = (params.PASSES | default(2)) | int %}

    SAVE_GCODE_STATE NAME=NOZZLE_SCRUB

    ##########################
    # Travel to Scrubbing Area

    G90 # absolute mode
    G0 Z{TRAVEL_HEIGHT} F{LIFT_SPEED} # lift Z for travel
    G0 X{BRUSH_POSITION_X} Y{BRUSH_POSITION_Y} F{TRAVEL_SPEED} # travel to brush origin
    G0 Z{WIPE_HEIGHT} F{LIFT_SPEED} # drop Z to wipe height
    
    ##########################
    # Scrub on long axis of brush
    _NOZZLE_SCRUB_90 BRUSH_DIRECTION=X BRUSH_POSITION={BRUSH_POSITION} BRUSH_SIZE={BRUSH_SIZE} WIPE_SPEED={WIPE_SPEED} PASSES={PASSES}
    #_NOZZLE_SCRUB_90 BRUSH_DIRECTION=Y BRUSH_POSITION=BRUSH_POSITION BRUSH_SIZE=BRUSH_SIZE WIPE_SPEED=WIPE_SPEED PASSES=PASSES

    #####################
    # Exit Scrubbing Area

    G90 # absolute mode
    G0 Z{TRAVEL_HEIGHT} F{LIFT_SPEED} # lift Z for travel
    G0 X{BRUSH_POSITION_X} Y{BRUSH_POSITION_Y} F{TRAVEL_SPEED} # return to the starting position

    RESTORE_GCODE_STATE NAME=NOZZLE_SCRUB

##########################
# 0 and 90 degrees → and ↑
[gcode_macro _NOZZLE_SCRUB_90]
description: scrubs at 0 and 90 degrees
gcode:
    SAVE_GCODE_STATE NAME=_NOZZLE_SCRUB_90

    {% set BRUSH_DIRECTION = params.BRUSH_DIRECTION | string %} # 'X' or 'Y'
    {% set BRUSH_POSITION = params.BRUSH_POSITION %}
    {% set BRUSH_POSITION_X = BRUSH_POSITION.split(",")[0] | float %}
    {% set BRUSH_POSITION_Y = BRUSH_POSITION.split(",")[1] | float %}
    {% set BRUSH_SIZE = params.BRUSH_SIZE %}
    {% set BRUSH_SIZE_X = BRUSH_SIZE.split(",")[0] | float %}
    {% set BRUSH_SIZE_Y = BRUSH_SIZE.split(",")[1] | float %}
    {% set WIPE_SPEED = params.WIPE_SPEED | float %}
    {% set PASSES = params.PASSES | int %}

    G90 # absolute mode
    G0 X{BRUSH_POSITION_X} Y{BRUSH_POSITION_Y} F{WIPE_SPEED} # travel to brush position

    {% set ns = namespace() %} # namespace required to update variabled in the loop
    {% set scrub_horizontal = BRUSH_DIRECTION == 'X' %}
    {% set ns.brush_width = (BRUSH_SIZE_X if scrub_horizontal else BRUSH_SIZE_Y) %}
    {% set brush_height = (BRUSH_SIZE_Y if scrub_horizontal else BRUSH_SIZE_X) %}
    {% set step = brush_height / (PASSES + 1) %}
    {% set step = step if brush_height >= 0 else (-1 * step) %}

    #{action_respond_info("DEBUG: scrub_horizontal: %s, ns.brush_width: %f, brush_height: %f, BRUSH_SIZE_X: %d, BRUSH_SIZE_Y: %d" % (scrub_horizontal is true, ns.brush_width, brush_height, BRUSH_SIZE_X, BRUSH_SIZE_Y))}

    G91 # relative mode
    {% for wipe in range(PASSES) %}
        {% if scrub_horizontal %}
            G0 Y{step} F{WIPE_SPEED}
            G0 X{ns.brush_width} F{WIPE_SPEED}
        {% else %} # scrub in the Y axis
            G0 X{step} F{WIPE_SPEED}
            G0 Y{ns.brush_width} F{WIPE_SPEED}
        {% endif %}

        # reverse direction of the brush width on each pass
        {% set ns.brush_width = -1 * ns.brush_width %}
    {% endfor %}
    RESTORE_GCODE_STATE NAME=_NOZZLE_SCRUB_90


[gcode_macro _NOZZLE_SCRUB_45]
description: scrubs at 45 and 135 degrees
gcode:
    SAVE_GCODE_STATE NAME=_NOZZLE_SCRUB_45

    {% set BRUSH_POSITION = params.BRUSH_POSITION %}
    {% set BRUSH_POSITION_X = BRUSH_POSITION.split(",")[0] | float %}
    {% set BRUSH_POSITION_Y = BRUSH_POSITION.split(",")[1] | float %}
    {% set BRUSH_SIZE = params.BRUSH_SIZE %}
    {% set BRUSH_SIZE_X = BRUSH_SIZE.split(",")[0] | float %}
    {% set BRUSH_SIZE_Y = BRUSH_SIZE.split(",")[1] | float %}
    {% set WIPE_SPEED = params.WIPE_SPEED | float %}

    G90 # absolute mode
    G0 X{BRUSH_POSITION_X} Y{BRUSH_POSITION_Y} F{WIPE_SPEED} # travel to brush position

    {% set ns = namespace() %} # namespace required to update variabled in the loop
    # works out the long axis of the brush
    {% set long_axis = "X" if (BRUSH_SIZE_X | abs) >= (BRUSH_SIZE_Y | abs) else "Y" %}
    {% set short_axis = "Y" if long_axis == "X" else "X" %}
    {% set long_axis_value = BRUSH_SIZE_X if long_axis == "X" else BRUSH_SIZE_Y %}
    {% set short_axis_value = BRUSH_SIZE_Y if long_axis == "Y" else BRUSH_SIZE_X %}
    {% set long_axis_direction = 1 if long_axis_value > 0 else -1 %}
    {% set short_axis_direction = 1 if short_axis_value > 0 else -1 %}
    # the size of the short axis is the length for scrubing moves in both axes
    {% set ns.stroke_short_axis = (short_axis_value | abs) * short_axis_direction %}
    # the direction of the ove in the opposide axis is decided by the sign
    {% set ns.stroke_long_axis = (short_axis_value | abs) * long_axis_direction %}
    {% set step_length = (long_axis_value | abs) - (short_axis_value | abs) %}
    {% set step = (step_length / PASSES) * long_axis_direction %}

    G91 # relative mode
    {% for wipe in range(PASSES) %}
        G0 {long_axis}{ns.stroke_long_axis} {short_axis}{ns.stroke_short_axis} F{WIPE_SPEED}
        G0 {long_axis}{step} F{WIPE_SPEED}

        # reverse direction of both stroke params on each pass
        {% set ns.stroke_x = -1 * ns.stroke_x %}
        {% set ns.stroke_y = -1 * ns.stroke_y %}
    {% endfor %}

    RESTORE_GCODE_STATE NAME=_NOZZLE_SCRUB_45


##
## TODO: read position variables from variables.cfg
##  (x,y)->(x,y):  (50,-16) -> (80,-20)
##
[gcode_macro NOZZLE_WIPE]
description: wipe the nozzle across a wiper blade to remove purge ooze
gcode:
    {% set PASSES = PASSES | default(1) %}
    {% set WIPER_POSITION = WIPER_POSITION | default("150,-7") %}
    {% set WIPER_POSITION_X = WIPER_POSITION.split(",")[0] | float %}
    {% set WIPER_POSITION_Y = WIPER_POSITION.split(",")[1] | float %}
    {% set WIPER_SIZE = WIPER_SIZE | default("100,100") %}
    {% set WIPER_SIZE_X = WIPER_SIZE.split(",")[0] | float %}
    {% set WIPER_SIZE_Y = WIPER_SIZE.split(",")[1] | float %}
    {% set TRAVEL_SPEED = TRAVEL_SPEED | default((printer.configfile.config.bed_mesh.speed | float) * 60) %}
    {% set TRAVEL_HEIGHT = TRAVEL_HEIGHT | default((printer.configfile.config.bed_mesh.horizontal_move_z | float) * 60) %}
    {% set LIFT_SPEED = LIFT_SPEED | default((printer.configfile.config.probe.lift_speed | float) * 60) %}
    {% set WIPE_SPEED = WIPE_SPEED | default(TRAVEL_SPEED) %}
    # This defaults the wipe height to something that should be safe
    {% set WIPE_HEIGHT = WIPE_HEIGHT | default(TRAVEL_HEIGHT) %}
    # default step size is the nozzle diameter
    {% set STEP_SIZE = STEP_SIZE | default((printer.configfile.config.extruder.nozzle_diameter | float)) %}

    SAVE_GCODE_STATE NAME=NOZZLE_WIPE
    # TODO!!!

    RESTORE_GCODE_STATE NAME=NOZZLE_WIPE

[gcode_macro NOZZLE_PURGE]
description: purge filament in the melt chamber
gcode:
    # TODO: allow the caller to specify the extruder
    # TODO: test for extruder being hot before running

    {% set PURGE_SPEED = PURGE_SPEED | default(5 * 60) %}
    {% set PURGE_LENGTH = PURGE_LENGTH | default(50) %}
    {% set POSITION = POSITION | default("100,100") %}
    {% set POSITION_X = POSITION.split(",")[0] | float %}
    {% set POSITION_Y = POSITION.split(",")[1] | float %}
    {% set TRAVEL_HEIGHT = TRAVEL_HEIGHT | default((printer.configfile.config.bed_mesh.horizontal_move_z | float) * 60) %}
    {% set LIFT_SPEED = LIFT_SPEED | default((printer.configfile.config.probe.lift_speed | float) * 60) %}
    {% set TRAVEL_SPEED = TRAVEL_SPEED | default((printer.configfile.config.bed_mesh.speed | float) * 60) %}

    SAVE_GCODE_STATE NAME=NOZZLE_PURGE
    # go to the purge location
    G0 Z{TRAVEL_HEIGHT} F{LIFT_SPEED}
    G0 X{POSITION_X} Y{POSITION_Y} F{TRAVEL_SPEED}

    # purge L mm of filament at S speed in mm/sec
    G0 E{PURGE_LENGTH} F{PURGE_SPEED}

    # possibly retract after?

    RESTORE_GCODE_STATE NAME=NOZZLE_PURGE

[gcode_macro NOZZLE_CLEAN]
gcode:
    NOZZLE_SCRUB
    NOZZLE_PURGE
    NOZZLE_WIPE
