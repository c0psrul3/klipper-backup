# https://github.com/xbst/Nevermore-Sensors
# Requires custom klippy extras to be installed to work properly.
# https://github.com/nevermore3d/Nevermore_Max/tree/master/Software/Klipper
#
# Inputs:
# sensor_name: Name of the sensor for references
# i2c_mcu: The MCU with the i2c bus
# i2c_bus: The i2c bus the sensor board is attached to

[sgp40]

[mcu nevermore_max]
# Uncomment "serial" if using USB, uncomment "canbus_uuid" if using CAN. Edit the serial address or UUID with the correct address/UUID for your PCB.
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_2B0027001350313155333120-if00
# canbus_uuid: 123456789012 # < update with the correct CAN Bus UUID

# i2c_bus        | Connector
# i2c1_PB8_PB9   | SENSORS1
# i2c2_PB10_PB11 | SENSORS2

[temperature_sensor temp_nevermore]
sensor_type: BME280
i2c_address: 119
i2c_mcu: max
i2c_bus: i2c2_PB10_PB11
i2c_speed: 400000

[temperature_sensor voc_nevermore]
sensor_type: SGP40
i2c_mcu: max
i2c_bus: i2c2_PB10_PB11
ref_temp_sensor: bme280 temp_nevermore
ref_humidity_sensor: bme280 temp_nevermore
i2c_speed: 400000

#[temperature_sensor temp_nevermore2]
#sensor_type: BME280
#i2c_address: 119
#i2c_mcu: max
#i2c_bus: i2c1_PB8_PB9

#[temperature_sensor voc_nevermore2]
#sensor_type: SGP40
#i2c_mcu: max
#i2c_bus: i2c1_PB8_PB9
#ref_temp_sensor: bme280 temp_nevermore2
#ref_humidity_sensor: bme280 temp_nevermore2


#[fan_generic Filter]
#pin: max:PB14
#tachometer_pin: max:PB15
#tachometer_ppr: 2

# Uncomment below if using the Max PCB AND want to use the 3-pin fan header

# [fan_generic Nevermore_Aux]
# pin: max:PA1
# tachometer_pin: max:PA0
# tachometer_ppr: 2

#[neopixel Nevermore_LED]
#pin: max:PD3
#chain_count: 16
#color_order: GRB
#initial_RED: 1
#initial_GREEN: 0
#initial_BLUE: 0



######################################################################
# BMP280/BME280/BME680 Environmental Sensor
######################################################################

# The macro below assumes you have a BME280 sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: BME280
#gcode_id: AMB
#
# Note the format of the parameter SENSOR in the macro below.  The BME280
# sensor status can be accessed using the format "bme280 <section_name>".
# The example section above is named "my_sensor", thus the bme280 can be
# queried as follows:
#
# QUERY_BME280 SENSOR='bme280 my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_BME280
# as well.

[gcode_macro QUERY_NEVERMORE_TEMP]
gcode:
    {% set sensor = printer["bme280 temp_nevermore"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}

######################################################################
# HTU21D family Environmental Sensor
######################################################################

# The macro below assumes you have a HTU21D sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: HTU21D
#
# Note the format of the parameter SENSOR in the macro below.  The HTU21D
# sensor status can be accessed using the format "htu21d <section_name>".
# The example section above is named "my_sensor", thus the htu21d can be
# queried as follows:
#
# QUERY_HTU21D SENSOR='htu21d my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_HTU21D
# as well.

[gcode_macro QUERY_HTU21D]
gcode:
    {% set sensor = printer["htu21d my_sensor"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.humidity))}


